{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/api/:path*",
      "headers": [
        {
          "key": "Access-Control-Allow-Origin",
          "value": "*"
        },
        {
          "key": "Access-Control-Allow-Methods",
          "value": "GET, POST, PUT, DELETE, OPTIONS"
        },
        {
          "key": "Access-Control-Allow-Headers",
          "value": "Content-Type, Authorization"
        }
      ],
      "regex": "^/api(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/[port]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[port]/api/anthropic",
      "regex": "^/([^/]+?)/api/anthropic(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/anthropic(?:/)?$"
    },
    {
      "page": "/[port]/api/anthropic/config",
      "regex": "^/([^/]+?)/api/anthropic/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/anthropic/config(?:/)?$"
    },
    {
      "page": "/[port]/api/autocomplete",
      "regex": "^/([^/]+?)/api/autocomplete(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/autocomplete(?:/)?$"
    },
    {
      "page": "/[port]/api/autocomplete/config",
      "regex": "^/([^/]+?)/api/autocomplete/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/autocomplete/config(?:/)?$"
    },
    {
      "page": "/[port]/api/azure",
      "regex": "^/([^/]+?)/api/azure(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/azure(?:/)?$"
    },
    {
      "page": "/[port]/api/azure/config",
      "regex": "^/([^/]+?)/api/azure/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/azure/config(?:/)?$"
    },
    {
      "page": "/[port]/api/bedrock",
      "regex": "^/([^/]+?)/api/bedrock(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/bedrock(?:/)?$"
    },
    {
      "page": "/[port]/api/bedrock/config",
      "regex": "^/([^/]+?)/api/bedrock/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/bedrock/config(?:/)?$"
    },
    {
      "page": "/[port]/api/byteplus",
      "regex": "^/([^/]+?)/api/byteplus(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/byteplus(?:/)?$"
    },
    {
      "page": "/[port]/api/byteplus/config",
      "regex": "^/([^/]+?)/api/byteplus/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/byteplus/config(?:/)?$"
    },
    {
      "page": "/[port]/api/cerebras",
      "regex": "^/([^/]+?)/api/cerebras(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/cerebras(?:/)?$"
    },
    {
      "page": "/[port]/api/cerebras/config",
      "regex": "^/([^/]+?)/api/cerebras/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/cerebras/config(?:/)?$"
    },
    {
      "page": "/[port]/api/claudecode",
      "regex": "^/([^/]+?)/api/claudecode(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/claudecode(?:/)?$"
    },
    {
      "page": "/[port]/api/claudecode/config",
      "regex": "^/([^/]+?)/api/claudecode/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/claudecode/config(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta",
      "regex": "^/([^/]+?)/api/codegptplusbeta(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta/code_interpreter",
      "regex": "^/([^/]+?)/api/codegptplusbeta/code_interpreter(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta/code_interpreter(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta/config",
      "regex": "^/([^/]+?)/api/codegptplusbeta/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta/config(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta/graph",
      "regex": "^/([^/]+?)/api/codegptplusbeta/graph(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta/graph(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta/marketplace",
      "regex": "^/([^/]+?)/api/codegptplusbeta/marketplace(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta/marketplace(?:/)?$"
    },
    {
      "page": "/[port]/api/codegptplusbeta/me",
      "regex": "^/([^/]+?)/api/codegptplusbeta/me(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/codegptplusbeta/me(?:/)?$"
    },
    {
      "page": "/[port]/api/cohere",
      "regex": "^/([^/]+?)/api/cohere(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/cohere(?:/)?$"
    },
    {
      "page": "/[port]/api/cohere/config",
      "regex": "^/([^/]+?)/api/cohere/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/cohere/config(?:/)?$"
    },
    {
      "page": "/[port]/api/custom",
      "regex": "^/([^/]+?)/api/custom(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/custom(?:/)?$"
    },
    {
      "page": "/[port]/api/custom/config",
      "regex": "^/([^/]+?)/api/custom/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/custom/config(?:/)?$"
    },
    {
      "page": "/[port]/api/deepseek",
      "regex": "^/([^/]+?)/api/deepseek(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/deepseek(?:/)?$"
    },
    {
      "page": "/[port]/api/deepseek/config",
      "regex": "^/([^/]+?)/api/deepseek/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/deepseek/config(?:/)?$"
    },
    {
      "page": "/[port]/api/docker",
      "regex": "^/([^/]+?)/api/docker(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker(?:/)?$"
    },
    {
      "page": "/[port]/api/docker/config",
      "regex": "^/([^/]+?)/api/docker/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker/config(?:/)?$"
    },
    {
      "page": "/[port]/api/docker/models",
      "regex": "^/([^/]+?)/api/docker/models(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker/models(?:/)?$"
    },
    {
      "page": "/[port]/api/docker/models/create",
      "regex": "^/([^/]+?)/api/docker/models/create(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker/models/create(?:/)?$"
    },
    {
      "page": "/[port]/api/docker/models/size",
      "regex": "^/([^/]+?)/api/docker/models/size(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker/models/size(?:/)?$"
    },
    {
      "page": "/[port]/api/docker/models/[namespace]/[name]",
      "regex": "^/([^/]+?)/api/docker/models/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport",
        "nxtPnamespace": "nxtPnamespace",
        "nxtPname": "nxtPname"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/docker/models/(?<nxtPnamespace>[^/]+?)/(?<nxtPname>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[port]/api/fireworksai",
      "regex": "^/([^/]+?)/api/fireworksai(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/fireworksai(?:/)?$"
    },
    {
      "page": "/[port]/api/fireworksai/config",
      "regex": "^/([^/]+?)/api/fireworksai/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/fireworksai/config(?:/)?$"
    },
    {
      "page": "/[port]/api/gemini-cli",
      "regex": "^/([^/]+?)/api/gemini\\-cli(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/gemini\\-cli(?:/)?$"
    },
    {
      "page": "/[port]/api/gemini-cli/config",
      "regex": "^/([^/]+?)/api/gemini\\-cli/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/gemini\\-cli/config(?:/)?$"
    },
    {
      "page": "/[port]/api/github",
      "regex": "^/([^/]+?)/api/github(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/github(?:/)?$"
    },
    {
      "page": "/[port]/api/github/config",
      "regex": "^/([^/]+?)/api/github/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/github/config(?:/)?$"
    },
    {
      "page": "/[port]/api/githubcopilot",
      "regex": "^/([^/]+?)/api/githubcopilot(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/githubcopilot(?:/)?$"
    },
    {
      "page": "/[port]/api/githubcopilot/config",
      "regex": "^/([^/]+?)/api/githubcopilot/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/githubcopilot/config(?:/)?$"
    },
    {
      "page": "/[port]/api/googleaistudio",
      "regex": "^/([^/]+?)/api/googleaistudio(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/googleaistudio(?:/)?$"
    },
    {
      "page": "/[port]/api/googleaistudio/config",
      "regex": "^/([^/]+?)/api/googleaistudio/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/googleaistudio/config(?:/)?$"
    },
    {
      "page": "/[port]/api/grok",
      "regex": "^/([^/]+?)/api/grok(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/grok(?:/)?$"
    },
    {
      "page": "/[port]/api/grok/config",
      "regex": "^/([^/]+?)/api/grok/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/grok/config(?:/)?$"
    },
    {
      "page": "/[port]/api/groq",
      "regex": "^/([^/]+?)/api/groq(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/groq(?:/)?$"
    },
    {
      "page": "/[port]/api/groq/config",
      "regex": "^/([^/]+?)/api/groq/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/groq/config(?:/)?$"
    },
    {
      "page": "/[port]/api/huggingface",
      "regex": "^/([^/]+?)/api/huggingface(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/huggingface(?:/)?$"
    },
    {
      "page": "/[port]/api/huggingface/config",
      "regex": "^/([^/]+?)/api/huggingface/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/huggingface/config(?:/)?$"
    },
    {
      "page": "/[port]/api/index-codebase",
      "regex": "^/([^/]+?)/api/index\\-codebase(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/index\\-codebase(?:/)?$"
    },
    {
      "page": "/[port]/api/lmstudio",
      "regex": "^/([^/]+?)/api/lmstudio(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/lmstudio(?:/)?$"
    },
    {
      "page": "/[port]/api/lmstudio/config",
      "regex": "^/([^/]+?)/api/lmstudio/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/lmstudio/config(?:/)?$"
    },
    {
      "page": "/[port]/api/mistral",
      "regex": "^/([^/]+?)/api/mistral(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/mistral(?:/)?$"
    },
    {
      "page": "/[port]/api/mistral/config",
      "regex": "^/([^/]+?)/api/mistral/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/mistral/config(?:/)?$"
    },
    {
      "page": "/[port]/api/nvidia",
      "regex": "^/([^/]+?)/api/nvidia(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/nvidia(?:/)?$"
    },
    {
      "page": "/[port]/api/nvidia/config",
      "regex": "^/([^/]+?)/api/nvidia/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/nvidia/config(?:/)?$"
    },
    {
      "page": "/[port]/api/ollama",
      "regex": "^/([^/]+?)/api/ollama(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/ollama(?:/)?$"
    },
    {
      "page": "/[port]/api/ollama/config",
      "regex": "^/([^/]+?)/api/ollama/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/ollama/config(?:/)?$"
    },
    {
      "page": "/[port]/api/ollama/delete",
      "regex": "^/([^/]+?)/api/ollama/delete(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/ollama/delete(?:/)?$"
    },
    {
      "page": "/[port]/api/ollama/pull",
      "regex": "^/([^/]+?)/api/ollama/pull(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/ollama/pull(?:/)?$"
    },
    {
      "page": "/[port]/api/ollama/tags",
      "regex": "^/([^/]+?)/api/ollama/tags(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/ollama/tags(?:/)?$"
    },
    {
      "page": "/[port]/api/openai",
      "regex": "^/([^/]+?)/api/openai(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/openai(?:/)?$"
    },
    {
      "page": "/[port]/api/openai/config",
      "regex": "^/([^/]+?)/api/openai/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/openai/config(?:/)?$"
    },
    {
      "page": "/[port]/api/openrouter",
      "regex": "^/([^/]+?)/api/openrouter(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/openrouter(?:/)?$"
    },
    {
      "page": "/[port]/api/openrouter/config",
      "regex": "^/([^/]+?)/api/openrouter/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/openrouter/config(?:/)?$"
    },
    {
      "page": "/[port]/api/perplexity",
      "regex": "^/([^/]+?)/api/perplexity(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/perplexity(?:/)?$"
    },
    {
      "page": "/[port]/api/perplexity/config",
      "regex": "^/([^/]+?)/api/perplexity/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/perplexity/config(?:/)?$"
    },
    {
      "page": "/[port]/api/settings",
      "regex": "^/([^/]+?)/api/settings(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/settings(?:/)?$"
    },
    {
      "page": "/[port]/api/settings/paths-from-project",
      "regex": "^/([^/]+?)/api/settings/paths\\-from\\-project(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/settings/paths\\-from\\-project(?:/)?$"
    },
    {
      "page": "/[port]/api/terminal",
      "regex": "^/([^/]+?)/api/terminal(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/terminal(?:/)?$"
    },
    {
      "page": "/[port]/api/vertex",
      "regex": "^/([^/]+?)/api/vertex(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/vertex(?:/)?$"
    },
    {
      "page": "/[port]/api/vertex/config",
      "regex": "^/([^/]+?)/api/vertex/config(?:/)?$",
      "routeKeys": {
        "nxtPport": "nxtPport"
      },
      "namedRegex": "^/(?<nxtPport>[^/]+?)/api/vertex/config(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}