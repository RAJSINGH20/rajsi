try{let a="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},b=(new a.Error).stack;b&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[b]="350b3d6d-41b6-4805-a93b-787ea8df9bcb",a._sentryDebugIdIdentifier="sentry-dbid-350b3d6d-41b6-4805-a93b-787ea8df9bcb")}catch(a){}"use strict";exports.id=8238,exports.ids=[8238],exports.modules={98238:(a,b,c)=>{c.d(b,{fromIni:()=>r});var d=c(99823),e=c(49884),f=c(75391),g=c(13043),h=c(5259);let i=a=>(0,g.g)(a,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),j=async(a,b,d,j={})=>{d.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let l=b[a],{source_profile:m,region:n}=l;if(!d.roleAssumer){let{getDefaultRoleAssumer:a}=await Promise.all([c.e(7756),c.e(5784)]).then(c.bind(c,15784));d.roleAssumer=a({...d.clientConfig,credentialProviderLogger:d.logger,parentClientConfig:{...d?.parentClientConfig,region:n??d?.parentClientConfig?.region}},d.clientPlugins)}if(m&&m in j)throw new f.C(`Detected a cycle attempting to resolve credentials for profile ${(0,e.Bz)(d)}. Profiles visited: `+Object.keys(j).join(", "),{logger:d.logger});d.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${m?`source_profile=[${m}]`:`profile=[${a}]`}`);let o=m?q(m,b,d,{...j,[m]:!0},k(b[m]??{})):(await ((a,b,d)=>{let e={EcsContainer:async a=>{let{fromHttp:b}=await Promise.all([c.e(7756),c.e(7208)]).then(c.bind(c,67208)),{fromContainerMetadata:e}=await c.e(8610).then(c.bind(c,28610));return d?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,h.c)(b(a??{}),e(a))().then(i)},Ec2InstanceMetadata:async a=>{d?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:b}=await c.e(8610).then(c.bind(c,28610));return async()=>b(a)().then(i)},Environment:async a=>{d?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:b}=await c.e(8838).then(c.bind(c,18838));return async()=>b(a)().then(i)}};if(a in e)return e[a];throw new f.C(`Unsupported credential source in profile ${b}. Got ${a}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:d})})(l.credential_source,a,d.logger)(d))();if(k(l))return o.then(a=>(0,g.g)(a,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let b={RoleArn:l.role_arn,RoleSessionName:l.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:l.external_id,DurationSeconds:parseInt(l.duration_seconds||"3600",10)},{mfa_serial:c}=l;if(c){if(!d.mfaCodeProvider)throw new f.C(`Profile ${a} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:d.logger,tryNextLink:!1});b.SerialNumber=c,b.TokenCode=await d.mfaCodeProvider(c)}let e=await o;return d.roleAssumer(e,b).then(a=>(0,g.g)(a,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},k=a=>!a.role_arn&&!!a.credential_source,l=async(a,b)=>c.e(5117).then(c.bind(c,15117)).then(({fromProcess:c})=>c({...a,profile:b})().then(a=>(0,g.g)(a,"CREDENTIALS_PROFILE_PROCESS","v"))),m=async(a,b,d={})=>{let{fromSSO:e}=await c.e(8457).then(c.bind(c,18457));return e({profile:a,logger:d.logger,parentClientConfig:d.parentClientConfig,clientConfig:d.clientConfig})().then(a=>b.sso_session?(0,g.g)(a,"CREDENTIALS_PROFILE_SSO","r"):(0,g.g)(a,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},n=a=>!!a&&"object"==typeof a&&"string"==typeof a.aws_access_key_id&&"string"==typeof a.aws_secret_access_key&&["undefined","string"].indexOf(typeof a.aws_session_token)>-1&&["undefined","string"].indexOf(typeof a.aws_account_id)>-1,o=async(a,b)=>{b?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let c={accessKeyId:a.aws_access_key_id,secretAccessKey:a.aws_secret_access_key,sessionToken:a.aws_session_token,...a.aws_credential_scope&&{credentialScope:a.aws_credential_scope},...a.aws_account_id&&{accountId:a.aws_account_id}};return(0,g.g)(c,"CREDENTIALS_PROFILE","n")},p=async(a,b)=>c.e(4596).then(c.bind(c,14596)).then(({fromTokenFile:c})=>c({webIdentityTokenFile:a.web_identity_token_file,roleArn:a.role_arn,roleSessionName:a.role_session_name,roleAssumerWithWebIdentity:b.roleAssumerWithWebIdentity,logger:b.logger,parentClientConfig:b.parentClientConfig})().then(a=>(0,g.g)(a,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),q=async(a,b,c,d={},e=!1)=>{let g=b[a];if(Object.keys(d).length>0&&n(g))return o(g,c);if(e||((a,{profile:b="default",logger:c}={})=>!!a&&"object"==typeof a&&"string"==typeof a.role_arn&&["undefined","string"].indexOf(typeof a.role_session_name)>-1&&["undefined","string"].indexOf(typeof a.external_id)>-1&&["undefined","string"].indexOf(typeof a.mfa_serial)>-1&&(((a,{profile:b,logger:c})=>{let d="string"==typeof a.source_profile&&void 0===a.credential_source;return d&&c?.debug?.(`    ${b} isAssumeRoleWithSourceProfile source_profile=${a.source_profile}`),d})(a,{profile:b,logger:c})||((a,{profile:b,logger:c})=>{let d="string"==typeof a.credential_source&&void 0===a.source_profile;return d&&c?.debug?.(`    ${b} isCredentialSourceProfile credential_source=${a.credential_source}`),d})(a,{profile:b,logger:c})))(g,{profile:a,logger:c.logger}))return j(a,b,c,d);if(n(g))return o(g,c);if((a=>!!a&&"object"==typeof a&&"string"==typeof a.web_identity_token_file&&"string"==typeof a.role_arn&&["undefined","string"].indexOf(typeof a.role_session_name)>-1)(g))return p(g,c);if((a=>!!a&&"object"==typeof a&&"string"==typeof a.credential_process)(g))return l(c,a);if((a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name))(g))return await m(a,g,c);throw new f.C(`Could not resolve credentials using profile: [${a}] in configuration/credentials file(s).`,{logger:c.logger})},r=(a={})=>async({callerClientConfig:b}={})=>{let c={...a,parentClientConfig:{...b,...a.parentClientConfig}};c.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let f=await (0,d.Y)(c);return q((0,e.Bz)({profile:a.profile??b?.profile}),f,c)}}};
//# sourceMappingURL=8238.js.map