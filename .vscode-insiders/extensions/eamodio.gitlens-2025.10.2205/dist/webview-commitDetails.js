exports.id=0,exports.ids=[0],exports.modules={775:(e,t,i)=>{i.d(t,{CommitDetailsWebviewProvider:()=>CommitDetailsWebviewProvider});var s=i(8039),o=i(1398),n=i(546),a=i(2625),r=i(4109),l=i(5859),h=i(7551),c=i(6234),p=i(819),u=i(1522),m=i(689),d=i(6695),g=i(3182),f=i(9395),w=i(7186),v=i(3177),y=i(1576),C=i(3790),b=i(5730),x=i(7483),R=i(9003),_=i(3761),k=i(4122),S=i(4641),P=i(6402),F=i(9827),D=i(5001),T=i(7606),W=i(6434),q=i(1335),O=i(3991),I=i(3481),A=i(9135);let MRU=class MRU{constructor(e=10,t){this.maxSize=e,this.comparator=t}stack=[];get count(){return this.stack.length}_position=0;get position(){return this._position}add(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0);let t=null!=this.comparator?this.stack.findIndex(t=>this.comparator(e,t)):this.stack.indexOf(e);-1!==t?this.stack.splice(t,1):this.stack.length===this.maxSize&&this.stack.pop(),this.stack.unshift(e),this._position=0}get(e){if(null!=e){if(e<0||e>=this.stack.length)return;return this.stack[e]}return this.stack.length>0?this.stack[0]:void 0}insert(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0),this.stack.unshift(e),this._position++}navigate(e){if(!(this.stack.length<=1)){if("back"===e){if(this._position>=this.stack.length-1)return;this._position+=1}else{if(this._position<=0)return;this._position-=1}return this.stack[this._position]}}};var H=i(7820),E=i(9061),U=i(5754);function M(e){return null!=e&&(0,U.sc)(e)&&("gitlens.views.commitDetails"===e.webview||"gitlens.views.graphDetails"===e.webview)}function L(e){return null!=e&&null!=e&&M(e)&&"object"==typeof e.webviewItemValue&&"file"===e.webviewItemValue.type}function V(e,t){let{path:i,repoPath:s,sha:o}=t,n=e.git.getRepositoryService(s);return null==o||(0,C._k)(o)?n.getAbsoluteUri(i,s):n.getRevisionUri(o,i)}async function z(e,t){let{path:i,repoPath:s,sha:o,staged:n,stashNumber:a}=t,r=e.git.getRepositoryService(s);if(null!=a){let e=await r.stash?.getStash(),t=e?.stashes.get(o);if(null==t)return[];let s=await t.findFile(i);return null!=t&&null!=s?[t,s]:[]}if((0,C._k)(o)){let e=await r.commits.getCommit(g.SU);return e=await e?.getCommitForFile(i,n),e?.file!=null?[e,e.file]:[]}let l=V(e,t);if(null==l)return[];let h=await r.commits.getCommitForFile(l,o);return h?.file!=null?[h,h.file]:[]}var B=i(6952),$=Object.defineProperty,N=Object.getOwnPropertyDescriptor,G=(e,t,i,s)=>{for(var o,n=s>1?void 0:s?N(t,i):t,a=e.length-1;a>=0;a--)(o=e[a])&&(n=(s?o(t,i,n):o(n))||n);return s&&n&&$(t,i,n),n};let{command:Y,getCommands:j}=(0,T.VL)();let CommitDetailsWebviewProvider=class CommitDetailsWebviewProvider{constructor(e,t,i){this.container=e,this.host=t,this.options=i,this._context={mode:"commit",inReview:!1,navigationStack:{count:0,position:0},pinned:!1,preferences:this.getPreferences(),commit:void 0,autolinksEnabled:P.H.get("views.commitDetails.autolinks.enabled"),experimentalComposerEnabled:P.H.get("ai.experimental.composer.enabled",void 0,!1),formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,wip:void 0,orgSettings:this.getOrgSettings(),hasAccount:void 0,hasIntegrationsConnected:void 0},this._disposable=o.Disposable.from(P.H.onDidChangeAny(this.onAnyConfigurationChanged,this),(0,F.wt)(this.onContextChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChange(this.onIntegrationsChanged,this))}_context;_disposable;_pinned=!1;_focused=!1;_commitStack=new MRU(10,(e,t)=>e.ref===t.ref);dispose(){this._disposable.dispose(),this._lineTrackerDisposable?.dispose(),this._repositorySubscription?.subscription.dispose(),this._selectionTrackerDisposable?.dispose(),this._wipSubscription?.subscription.dispose()}getTelemetryContext(){let e;if("wip"===this.mode){let t=this._context.wip?.repo;e={...this.host.getTelemetryContext(),"context.attachedTo":this.options.attachedTo,"context.mode":this.mode,"context.autolinks":+(this._context.wip?.pullRequest!=null),"context.inReview":this._context.inReview,"context.codeSuggestions":this._context.wip?.codeSuggestions?.length??0,"context.repository.id":t?.idHash,"context.repository.scheme":t?.uri.scheme,"context.repository.closed":t?.closed,"context.repository.folder.scheme":t?.folder?.uri.scheme,"context.repository.provider.id":t?.provider.id}}else e={...this.host.getTelemetryContext(),"context.attachedTo":this.options.attachedTo,"context.mode":this.mode,"context.autolinks":+(null!=this._context.pullRequest)+(this._context.autolinkedIssues?.length??0),"context.pinned":this._context.pinned,"context.type":null==this._context.commit?void 0:(0,u.kk)(this._context.commit)?"stash":"commit","context.uncommitted":this._context.commit?.isUncommitted??!1};return e}_skipNextRefreshOnVisibilityChange=!1;_shouldRefreshPullRequestDetails=!1;async onShowing(e,t,...i){let[s]=i;return s?.type==="wip"?[await this.onShowingWip(s),this.getTelemetryContext()]:[await this.onShowingCommit(s,t),this.getTelemetryContext()]}get inReview(){return this._context.inReview}async onShowingWip(e,t){this._context.source=e.source;let i=null!=e.inReview&&this.inReview!==e.inReview;return"wip"!==this.mode||null!=e.repository&&this._context.wip?.repo!==e.repository?(i&&null!=e.inReview&&(this._context.inReview=e.inReview),await this.setMode("wip",e.repository),i&&!0===e.inReview&&this.trackOpenReviewMode(e.source)):i&&await this.setInReview(e.inReview,e.source),(!t?.preserveVisibility||!!this.host.visible)&&("launchpad"===e.source&&this.host.visible&&(this._shouldRefreshPullRequestDetails=!0,this.onRefresh()),!0)}async onShowingCommit(e,t){let i,s;if((0,E.c)(e)){let{commit:t}=e.state;t?.repoPath!=null&&t?.sha!=null&&(i=null!=t.stashNumber?{commit:(0,y.kA)(t.sha,t.repoPath,{refType:"stash",name:t.message,number:t.stashNumber})}:{commit:(0,y.kA)(t.sha,t.repoPath,{refType:"revision",message:t.message})})}else i=null!=e&&"object"==typeof e?e:void 0;return null!=i&&(i.preserveFocus&&(null==t?t={preserveFocus:!0}:t.preserveFocus=!0),{commit:s,...i}=i),null!=s&&"wip"===this.mode&&i?.interaction!=="passive"&&await this.setMode("commit"),null!=s||this._pinned||(s=this.getBestCommitOrStash()),null==s||this._context.commit?.ref.startsWith(s.ref)||await this.updateCommit(s,{pinned:!1}),(!i?.preserveVisibility||!!this.host.visible)&&(this._skipNextRefreshOnVisibilityChange=!0,!0)}async trackOpenReviewMode(e){if(this._context.wip?.pullRequest==null)return;let t=this._context.wip.pullRequest.provider.id,i=await this.container.git.visibility(this._context.wip.repo.path),s=this._context.wip.changes?.files.length??0;this.container.telemetry.sendEvent("openReviewMode",{provider:t,"repository.visibility":i,repoPrivacy:i,source:e??"inspect",filesChanged:s})}includeBootstrap(e){return e?Promise.resolve({webviewId:this.host.id,webviewInstanceId:this.host.instanceId,timestamp:Date.now()}):this.getState(this._context)}registerCommands(){let e=[(0,S.Ip)(`${this.host.id}.refresh`,()=>this.host.refresh(!0))];for(let{command:t,handler:i}of j())e.push((0,S.Ip)((0,T.Wu)(t,this.host.type),i,this));return e}onFocusChanged(e){this._focused!==e&&(this._focused=e,e&&this.isLineTrackerSuspended&&this.ensureTrackers())}onMessageReceived(e){switch(!0){case B.Lb.is(e):this.openFileOnRemote(e.params);break;case B.Yt.is(e):this.openFile(e.params);break;case B.Sh.is(e):this.openFileChangesWithWorking(e.params);break;case B.UB.is(e):this.openChanges(e.params);break;case B.xy.is(e):this.showFileActions(e.params);break;case B.k$.is(e):switch(e.params.action){case"graph":{let e;if(null==(e="wip"===this._context.mode?this._context.wip?.changes!=null?(0,y.kA)(g.SU,this._context.wip.changes.repository.path,{refType:"revision"}):void 0:null!=this._context.commit?(0,f.rd)(this._context.commit):void 0))return;(0,S.RS)("graph"===this.options.attachedTo?"gitlens.showInCommitGraphView":"gitlens.showInCommitGraph",{ref:e});break}case"more":this.showCommitActions();break;case"scm":(0,S.S4)("workbench.view.scm");break;case"sha":null!=this._context.commit&&(e.params.alt?(0,S.RS)("gitlens.copyMessageToClipboard",{message:this._context.commit.message}):(0,u.kk)(this._context.commit)?o.env.clipboard.writeText(this._context.commit.stashName):(0,S.RS)("gitlens.copyShaToClipboard",{sha:this._context.commit.sha}))}break;case B.QY.is(e):this.showCommitPicker();break;case B.tu.is(e):this.showCommitSearch();break;case B.b6.is(e):this.switchMode(e.params);break;case B.T$.is(e):this.updatePinned(e.params.pin??!1,!0);break;case B.TC.is(e):this.navigateStack(e.params.direction);break;case B.Tu.is(e):this.updatePreferences(e.params);break;case B.fF.is(e):this.explainRequest(B.fF,e);break;case B.Nb.is(e):this.generateRequest(B.Nb,e);break;case B.eg.is(e):this.stageFile(e.params);break;case B.Zr.is(e):this.unstageFile(e.params);break;case B.GC.is(e):this.createPatchFromWip(e.params);break;case B.qy.is(e):this.fetch();break;case B.D5.is(e):this.publish();break;case B.qf.is(e):this.push();break;case B.z_.is(e):this.pull();break;case B.Cv.is(e):this.switch();break;case B.zK.is(e):this.suggestChanges(e.params);break;case B.Iq.is(e):this.showCodeSuggestion(e.params.id);break;case B.jY.is(e):this.setInReview(e.params.inReview,"inspect-overview");break;case B.PR.is(e):this.openPullRequestChanges();break;case B.N9.is(e):this.openPullRequestComparison();break;case B.vL.is(e):this.openPullRequestOnRemote();break;case B.mK.is(e):this.showPullRequestDetails()}}getEncodedEntityid(e=this._context.wip?.pullRequest){if(null==e)return;let t=(0,k.Dz)(e);if(null!=t)return s.EntityIdentifierUtils.encode(t)}async trackCreateCodeSuggestion(e,t){if(this._context.wip?.pullRequest==null)return;let i=this._context.wip.pullRequest.provider.id,s=await this.container.git.visibility(this._context.wip.repo.path);this.container.telemetry.sendEvent("codeSuggestionCreated",{provider:i,"repository.visibility":s,repoPrivacy:s,draftId:e.id,draftPrivacy:e.visibility,filesChanged:t,source:"reviewMode"},{source:"inspect-overview",detail:{reviewMode:!0}})}async suggestChanges(e){if(!await (0,R.G5)(this.container,"Code Suggestions are a Preview feature and require an account.",{source:"code-suggest",detail:"create"})||!await (0,x.l)(this.container))return;let t=[],i=Object.entries(e.changesets),n=1===i.length,a=0;for(let[e,s]of i){if(!n&&!1===s.checked)continue;let e=this._context.wip.repo.id===s.repository.path?this._context.wip.repo:void 0;if(null==e)continue;let{checked:i}=s,o={to:g.SU,from:"HEAD"};"staged"===i&&(o={...o,to:g.id});let r=this.getEncodedEntityid();null!=r&&(s.files&&s.files.length>0&&("staged"===i?a+=s.files.filter(e=>!0===e.staged).length:a+=s.files.length),t.push({repository:e,revision:o,prEntityId:r}))}if(0!==t.length)try{let i=(0,k.Dz)(this._context.wip.pullRequest),n=s.EntityIdentifierUtils.encode(i),r={description:e.description,visibility:"provider_access",prEntityId:n},l=await this.container.drafts.createDraft("suggested_pr_change",e.title,t,r);(async function(){let e={title:"View Code Suggestions"},t={title:"Copy Link"},i=!1;for(;;){let s=await o.window.showInformationMessage(`Code Suggestion successfully created${i?"— link copied to the clipboard":""}`,e,t);if(s===t){o.env.clipboard.writeText(l.deepLinkUrl),i=!0;continue}s===e&&(0,b.X)({mode:"view",draft:l,source:"notification"});break}})(),this.setInReview(!1),this.trackCreateCodeSuggestion(l,a)}catch(e){o.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}getRepoActionPath(){return"wip"===this._context.mode?this._context.wip?.repo.path:this._context.commit?.repoPath}fetch(){let e=this.getRepoActionPath();null!=e&&c.hd(e)}publish(){let e=this.getRepoActionPath();null!=e&&(0,S.wS)("git.publish",o.Uri.file(e))}push(){let e=this.getRepoActionPath();null!=e&&c.VC(e)}pull(){let e=this.getRepoActionPath();null!=e&&c.a$(e)}switch(){let e=this.getRepoActionPath();null!=e&&c.S_(e)}get pullRequestContext(){if("wip"===this.mode){if(this._context.wip?.pullRequest==null)return;return{repoPath:this._context.wip.repo.path,branch:this._context.wip.branch,pr:this._context.wip.pullRequest}}if(null!=this._context.pullRequest)return{repoPath:this._context.commit.repoPath,commit:this._context.commit,pr:this._context.pullRequest}}openPullRequestChanges(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=(0,v.tI)(e,t.refs);return(0,h.$5)(this.container,{repoPath:i.repoPath,lhs:i.base.ref,rhs:i.head.ref},{title:`Changes in Pull Request #${t.id}`})}openPullRequestComparison(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=(0,v.tI)(e,t.refs);return this.container.views.searchAndCompare.compare(i.repoPath,i.head,i.base)}async openPullRequestOnRemote(e){if(null==this.pullRequestContext)return;let{pr:{url:t}}=this.pullRequestContext;return(0,S.RS)("gitlens.openPullRequestOnRemote",{pr:{url:t},clipboard:e})}async showPullRequestDetails(){if(null==this.pullRequestContext)return;let{pr:e,repoPath:t,branch:i,commit:s}=this.pullRequestContext;if(null!=e)return this.container.views.pullRequest.showPullRequest(e,s??i??t)}onRefresh(e){if(!this._pinned)if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;this.updateWipState(this.container.git.getBestRepositoryOrFirst(null!=e?o.Uri.parse(e):void 0))}else{let e=this.getBestCommitOrStash();this.updateCommit(e,{immediate:!1})}}onReloaded(){this.notifyDidChangeState(!0)}onVisibilityChanged(e){if(this.ensureTrackers(),!e)return;let t=this._skipNextRefreshOnVisibilityChange;t&&(this._skipNextRefreshOnVisibilityChange=!1),t||this.onRefresh(),this.notifyDidChangeState(!0)}onAnyConfigurationChanged(e){(P.H.changed(e,["defaultDateFormat","defaultDateStyle","views.commitDetails.files","views.commitDetails.avatars","ai.enabled"])||P.H.changedCore(e,"workbench.tree.renderIndentGuides")||P.H.changedCore(e,"workbench.tree.indent"))&&(this._context.preferences=this.getPreferences(),this.notifyDidChangeState()),null!=this._context.commit&&P.H.changed(e,["views.commitDetails.autolinks","views.commitDetails.pullRequests"])&&this.updateCommit(this._context.commit,{force:!0})}onSubscriptionChanged(e){this.updateCodeSuggestions(),this.updateHasAccount(e.current)}updateHasAccount(e){let t=null!=e.account;this._context.hasAccount!==t&&this.notifyDidChangeHasAccount(t)}async getHasAccount(e=!1){return(null==this._context.hasAccount||e)&&(this._context.hasAccount=(await this.container.subscription.getSubscription())?.account!=null),this._context.hasAccount}async onIntegrationsChanged(e){let t=this._context.hasIntegrationsConnected,i=await this.getHasIntegrationsConnected(!0);t!==i&&this.notifyDidChangeIntegrations(i)}async getHasIntegrationsConnected(e=!1){if(e||null==this._context.hasIntegrationsConnected){let e=await this.container.integrations.getConfigured();e.length?this._context.hasIntegrationsConnected=e.some(e=>(0,r.LT)(e.integrationId)):this._context.hasIntegrationsConnected=!1}return this._context.hasIntegrationsConnected}getPreferences(){return{pullRequestExpanded:this.container.storage.getWorkspace("views:commitDetails:pullRequestExpanded")??!0,avatars:P.H.get("views.commitDetails.avatars"),dateFormat:P.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",dateStyle:P.H.get("defaultDateStyle")??"relative",files:P.H.get("views.commitDetails.files"),indentGuides:P.H.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:P.H.getCore("workbench.tree.indent"),aiEnabled:P.H.get("ai.enabled")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&this.notifyDidChangeOrgSettings()}getOrgSettings(){return{ai:(0,F.SD)("gitlens:gk:organization:ai:enabled",!1),drafts:(0,F.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onCommitSelected(e){if(null!=e.data&&("graph"!==this.options.attachedTo||"gitlens.views.graph"===e.source)&&("default"!==this.options.attachedTo||"gitlens.views.graph"!==e.source)){if("graph"===this.options.attachedTo)return void(e.data.commit.ref===g.SU?"wip"!==this.mode?this.setMode("wip",this.container.git.getRepository(e.data.commit.repoPath)):e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath)):(this._pinned&&"passive"===e.data.interaction&&(this._commitStack.insert((0,f.rd)(e.data.commit)),this.updateNavigation()),"commit"!==this.mode&&this.setMode("commit",this.container.git.getRepository(e.data.commit.repoPath)),this._pinned&&"passive"===e.data.interaction||this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data)));if("wip"===this.mode){e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath));return}this._pinned&&"passive"===e.data.interaction?(this._commitStack.insert((0,f.rd)(e.data.commit)),this.updateNavigation()):this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data)}}_lineTrackerDisposable;_selectionTrackerDisposable;ensureTrackers(){if((this._selectionTrackerDisposable?.dispose(),this._selectionTrackerDisposable=void 0,this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0,this.host.visible)&&(this._selectionTrackerDisposable=this.container.events.on("commit:selected",this.onCommitSelected,this),!this._pinned&&"graph"!==this.options.attachedTo)){let{lineTracker:e}=this.container;this._lineTrackerDisposable=e.subscribe(this,e.onDidChangeActiveLines(this.onActiveEditorLinesChanged,this))}}get isLineTrackerSuspended(){return"graph"!==this.options.attachedTo&&null==this._lineTrackerDisposable}suspendLineTracker(){setTimeout(()=>{this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0},100)}createPatchFromWip(e){if(null==e.changes)return;let t={type:"wip",repository:{name:e.changes.repository.name,path:e.changes.repository.path,uri:e.changes.repository.uri},files:e.changes.files,revision:{to:g.SU,from:"HEAD"},checked:e.checked};(0,b.X)({mode:"create",create:{changes:[t]}})}showCodeSuggestion(e){let t=this._context.wip?.codeSuggestions?.find(t=>t.id===e);null!=t&&(0,b.X)({mode:"view",draft:t,source:"inspect"})}onActiveEditorLinesChanged(e){if(e.pending||null==e.editor||e.suspended)return;if("wip"===this.mode){let t=this.container.git.getBestRepositoryOrFirst(e.editor);this.updateWipState(t,!0);return}let t=e.selections?.[0]?.active,i=null!=t?this.container.lineTracker.getState(t)?.commit:void 0;this.updateCommit(i)}_wipSubscription;get mode(){return this._context.mode}async setMode(e,t){this._context.mode=e,"commit"===e?this.notifyDidChangeState(!0):await this.updateWipState(t??this.container.git.getBestRepositoryOrFirst()),this.updateTitle()}updateTitle(){if("commit"===this.mode)if(null==this._context.commit)this.host.title=this.host.originalTitle;else{let e="Commit Details";"stash"===this._context.commit.refType?e="Stash Details":this._context.commit.isUncommitted&&(e="Uncommitted Changes"),this.host.title=`${this.host.originalTitle}: ${e}`}else this.host.title=`${this.host.originalTitle}: Overview`}async explainRequest(e,t){let i;try{if(null!=this._context.commit&&(this._context.commit.isUncommitted||this._context.commit.isUncommittedStaged))await (0,S.RS)("gitlens.ai.explainWip",{repoPath:this._context.commit.repoPath,source:{source:"inspect",context:{type:"wip"}}});else{let e=(0,u.kk)(this._context.commit);await (0,S.RS)(e?"gitlens.ai.explainStash":"gitlens.ai.explainCommit",{repoPath:this._context.commit.repoPath,rev:this._context.commit.sha,source:{source:"inspect",context:{type:e?"stash":"commit"}}})}i={result:{summary:"",body:""}}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}async generateRequest(e,t){let i,s=this._context.wip?.repo;if(!s)return void this.host.respond(e,t,{error:{message:"Unable to find changes"}});try{let e=await this.container.ai.generateCreateDraft(s,{source:"inspect",context:{type:"suggested_pr_change"}},{progress:{location:{viewId:this.host.id}}});if("cancelled"===e)throw Error("Operation was canceled");if(null==e)throw Error("Error retrieving content");i={title:e.parsed.summary,description:e.parsed.body}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}navigateStack(e){let t=this._commitStack.navigate(e);null!=t&&this.updateCommit(t,{immediate:!0,skipStack:!0})}_cancellationTokenSource=void 0;async getState(e){let t;null!=this._cancellationTokenSource&&(this._cancellationTokenSource.cancel(),this._cancellationTokenSource=void 0),null!=e.commit&&(t=await this.getDetailsModel(e.commit,e.formattedMessage));let i=e.wip;if(null==i&&this._repositorySubscription){null==this._cancellationTokenSource&&(this._cancellationTokenSource=new o.CancellationTokenSource);let e=this._cancellationTokenSource.token;setTimeout(()=>{e.isCancellationRequested||this.updateWipState(this._repositorySubscription?.repo)},100)}return e.hasAccount??=await this.getHasAccount(),e.hasIntegrationsConnected??=await this.getHasIntegrationsConnected(),{...this.host.baseWebviewState,mode:e.mode,commit:t,navigationStack:e.navigationStack,pinned:e.pinned,preferences:e.preferences,autolinksEnabled:e.autolinksEnabled,experimentalComposerEnabled:e.experimentalComposerEnabled,autolinkedIssues:e.autolinkedIssues,pullRequest:e.pullRequest,wip:K(i),orgSettings:e.orgSettings,inReview:e.inReview,hasAccount:e.hasAccount,hasIntegrationsConnected:e.hasIntegrationsConnected}}async updateWipState(e,t=!1){let i;if(null!=this._wipSubscription){let{repo:i,subscription:s}=this._wipSubscription;if(e?.path!==i.path)s.dispose(),this._wipSubscription=void 0;else if(t)return}let s=this.inReview;if(null!=e){null==this._wipSubscription&&(this._wipSubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)});let t=await this.getWipChange(e);if(i={changes:t,repo:e,repositoryCount:this.container.git.openRepositoryCount},null!=t){let s=await this.getWipBranchDetails(e,t.branchName);null!=s&&(i.branch=s.branch,i.pullRequest=s.pullRequest,i.codeSuggestions=s.codeSuggestions)}if(i.pullRequest?.state!=="opened"&&(s=!1),this._shouldRefreshPullRequestDetails&&null!=i.pullRequest&&"launchpad"===this._context.source&&(this.container.views.pullRequest.showPullRequest(i.pullRequest,i.branch??e.path),this._shouldRefreshPullRequestDetails=!1),await this.host.notify(B.u,{wip:K(i),inReview:s})){this._context.wip=i,this._context.inReview=s;return}}this._context.wip=i,this._context.inReview=s,this.notifyDidChangeState(!0)}async getWipBranchDetails(e,t){let i=await e.git.branches.getBranch(t);if(null==i)return;if("commit"===this.mode)return{branch:i,pullRequest:void 0,codeSuggestions:[]};let s=await i.getAssociatedPullRequest({expiryOverride:3e5}),o=[];if(null!=s&&(0,_.Ac)(s.provider)){let t=await this.getCodeSuggestions(s,e);t.length&&(o=t)}return{branch:i,pullRequest:s,codeSuggestions:o}}async canAccessDrafts(){return await this.getHasAccount()!==!1&&(0,F.SD)("gitlens:gk:organization:drafts:enabled",!1)}async getCodeSuggestions(e,t){if(!await this.canAccessDrafts()||!(0,_.Ac)(e.provider))return[];let i=await this.container.drafts.getCodeSuggestions(e,t);for(let e of i){if(null!=e.author.avatarUri||null==e.organizationId)continue;let t=e.author.email;if(null==t){let i=await this.container.organizations.getMemberById(e.author.id,e.organizationId);t=i?.email}null!=t&&(e.author.avatarUri=(0,a.m_)(t))}return i}async updateCodeSuggestions(){if("wip"!==this.mode||this._context.wip?.pullRequest==null)return;let e=this._context.wip,{pullRequest:t,repo:i}=e;if(e.codeSuggestions=(0,_.Ac)(t.provider)?await this.getCodeSuggestions(t,i):[],await this.host.notify(B.u,{wip:K(e)})){this._context.wip=e;return}this._context.wip=e,this.notifyDidChangeState(!0)}_repositorySubscription;async updateCommit(e,t){let i;if(!t?.force&&this._context.commit?.sha===e?.ref)return;if((0,u.WM)(e))i=e;else if(null!=e)if("stash"===e.refType){let t=await this.container.git.getRepositoryService(e.repoPath).stash?.getStash();i=t?.stashes.get(e.ref)}else i=await this.container.git.getRepositoryService(e.repoPath).commits.getCommit(e.ref);let s=this._context.wip;if(null!=this._repositorySubscription){let{repo:e,subscription:t}=this._repositorySubscription;i?.repoPath!==e.path&&(t.dispose(),this._repositorySubscription=void 0,s=void 0)}if(null==this._repositorySubscription&&null!=i){let e=await this.container.git.getOrOpenRepository(i.repoPath);null!=e&&(this._repositorySubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)},"wip"===this.mode?this.updateWipState(e):s=void 0)}this._context.commit=i,this._context.autolinksEnabled=P.H.get("views.commitDetails.autolinks.enabled"),this._context.experimentalComposerEnabled=P.H.get("ai.experimental.composer.enabled",void 0,!1),this._context.formattedMessage=void 0,this._context.autolinkedIssues=void 0,this._context.pullRequest=void 0,this._context.wip=s,t?.pinned!=null&&this.updatePinned(t?.pinned),this.isLineTrackerSuspended&&this.ensureTrackers(),null!=i&&(t?.skipStack||this._commitStack.add((0,f.rd)(i)),this.updateNavigation()),this.notifyDidChangeCommit(t?.immediate??!0),this.updateTitle()}subscribeToRepositoryWip(e){return o.Disposable.from(e.watchFileSystem(1e3),e.onDidChangeFileSystem(()=>this.onWipChanged(e)),e.onDidChange(t=>{t.changed(d.Z_.Index,d.Ti.Any)&&this.onWipChanged(e)}))}onWipChanged(e){this.updateWipState(e)}async getWipChange(e){let t=await this.container.git.getRepositoryService(e.path).status.getStatus();if(null==t)return;let i=[];for(let e of t.files){let t={repoPath:e.repoPath,path:e.path,status:e.status,originalPath:e.originalPath,staged:e.staged};i.push(t),e.staged&&e.wip&&i.push({...t,staged:!1})}return{repository:{name:e.name,path:e.path,uri:e.uri.toString()},branchName:t.branch,files:i}}updatePinned(e,t){e!==this._context.pinned&&(this._pinned=e,this.ensureTrackers(),this._context.pinned=e,this.notifyDidChangeCommit(t))}updatePreferences(e){if(this._context.preferences?.pullRequestExpanded===e.pullRequestExpanded&&this._context.preferences?.files?.compact===e.files?.compact&&this._context.preferences?.files?.icon===e.files?.icon&&this._context.preferences?.files?.layout===e.files?.layout&&this._context.preferences?.files?.threshold===e.files?.threshold)return;let t={...this._context.preferences};null!=e.pullRequestExpanded&&this._context.preferences?.pullRequestExpanded!==e.pullRequestExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:pullRequestExpanded",e.pullRequestExpanded).catch(),t.pullRequestExpanded=e.pullRequestExpanded),null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&P.H.updateEffective("views.commitDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&P.H.updateEffective("views.commitDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&P.H.updateEffective("views.commitDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&P.H.updateEffective("views.commitDetails.files.threshold",e.files?.threshold),t.files=e.files),this._context.preferences=t,this.notifyDidChangeCommit()}_notifyDidChangeCommitDebounced=void 0;notifyDidChangeCommit(e=!1){if(e)return void this.notifyDidChangeState();this._notifyDidChangeCommitDebounced??=(0,q.s)(this.notifyDidChangeState.bind(this),500),this._notifyDidChangeCommitDebounced()}notifyDidChangeOrgSettings(){this._context.orgSettings=this.getOrgSettings(),this.host.notify(B.I0,{orgSettings:this._context.orgSettings})}notifyDidChangeHasAccount(e){this._context.hasAccount=e,this.host.notify(B.A4,{hasAccount:e})}notifyDidChangeIntegrations(e){this._context.hasIntegrationsConnected=e,this.host.notify(B.IK,{hasIntegrationsConnected:e})}updateNavigation(){let e=this._commitStack.get(this._commitStack.position-1)?.ref;null!=e&&(e=(0,C.pV)(e)),this._context.navigationStack={count:this._commitStack.count,position:this._commitStack.position,hint:e},this.notifyDidChangeCommit()}async setInReview(e,t){if(this.inReview!==e){if(await this.host.notify(B.LX,{inReview:e})){this._context.inReview=e,e&&this.trackOpenReviewMode(t);return}this._context.inReview=e,this.notifyDidChangeState(!0),e&&this.trackOpenReviewMode(t)}}async notifyDidChangeState(e){let t=(0,A.dQ)();return this._notifyDidChangeCommitDebounced?.cancel(),o.window.withProgress({location:{viewId:this.host.id}},async()=>{try{await this.host.notify(B.tK,{state:await this.getState(this._context)})}catch(e){I.Vy.error(e,t)}})}getBestCommitOrStash(){let e;if(!this._pinned){if("graph"!==this.options.attachedTo&&null!=o.window.activeTextEditor){let{lineTracker:t}=this.container,i=t.selections?.[0].active;null!=i&&(e=t.getState(i)?.commit)}if(null==e)if("graph"===this.options.attachedTo){let t=this.container.events.getCachedEventArgsBySource("commit:selected","gitlens.views.graph");e=t?.commit}else{let t=this.container.events.getCachedEventArgs("commit:selected");e=t?.commit}return e}}async getDetailsModel(e,t){let[i,s,o]=await Promise.allSettled([!e.hasFullDetails()?e.ensureFullDetails({include:{uncommittedFiles:!0}}).then(()=>e):e,e.author.getAvatarUri(e,{size:32}),this.container.git.getRepositoryService(e.repoPath).remotes.getBestRemoteWithIntegration({includeDisconnected:!0})]);e=(0,H.Ro)(i,e);let a=(0,H.Ro)(s),r=(0,H.Ro)(o);t??=this.getFormattedMessage(e,r);let l=null!=e.message?await this.container.autolinks.getAutolinks(e.message,r):void 0;return{repoPath:e.repoPath,sha:e.sha,shortSha:e.shortSha,author:{...e.author,avatar:a?.toString(!0)},message:t,parents:e.parents,stashNumber:"stash"===e.refType?e.stashNumber:void 0,files:e.isUncommitted?e.anyFiles:e.fileset?.files,stats:e.stats,autolinks:null!=l?[...(0,O.Tj)(l.values(),n.U8)]:void 0,enriched:this.getEnrichedState(e,r)}}async getEnrichedState(e,t){let[i,s]=t?.provider!=null?await Promise.allSettled([P.H.get("views.commitDetails.autolinks.enabled")&&P.H.get("views.commitDetails.autolinks.enhanced")?(0,H.zu)(e.getEnrichedAutolinks(t)):void 0,P.H.get("views.commitDetails.pullRequests.enabled")?e.getAssociatedPullRequest(t):void 0]):[],o=(0,H.Ro)(i)?.value,n=(0,H.Ro)(s),a=null!=o?[...(0,O.x1)(o.values(),([e])=>{var t;return e?.value!=null?{type:(t=e.value).type,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain,icon:t.provider.icon},id:t.id,nodeId:t.nodeId,title:t.title,url:t.url,createdDate:t.createdDate,updatedDate:t.updatedDate,closedDate:t.closedDate,closed:t.closed,state:t.state}:void 0})]:[];return{formattedMessage:this.getFormattedMessage(e,t,o),associatedPullRequest:null!=n?(0,v.pf)(n):void 0,autolinkedIssues:a}}getFormattedMessage(e,t,i){let s=p.c.fromTemplate("${message}",e),o=s.indexOf(`
`);return(-1!==o&&(s=`${s.substring(0,o)}${B.iA}${s.substring(o+1)}`),P.H.get("views.commitDetails.autolinks.enabled"))?this.container.autolinks.linkify(s,"html",null!=t?[t]:void 0,i):s}async getFileCommitFromContextOrParams(e){return null==e?[]:M(e)?L(e)?z(this.container,e.webviewItemValue):[]:this.getFileCommitFromParams(e)}async getFileCommitFromParams(e){let t;if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;if(null==e)return[];t=await this.container.git.getRepositoryService(o.Uri.parse(e)).commits.getCommit(g.SU)}else t=this._context.commit;return null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file]:[]}showCommitPicker(){(0,l.b)({command:"log",state:{reference:"HEAD",repo:this._context.commit?.repoPath,openPickInView:!0}})}showCommitSearch(){(0,l.b)({command:"search",state:{openPickInView:!0}})}showCommitActions(){null==this._context.commit||this._context.commit.isUncommitted||(0,h.G4)(this._context.commit)}async showFileActions(e){let[t,i]=await this.getFileCommitFromParams(e);null!=t&&(this.suspendLineTracker(),(0,h.G4)(t,i))}switchMode(e){let t;if(this.mode===e.mode)return;let i=this.mode;if("wip"===e.mode){let{repoPath:i}=e;if(null==i){if(null==(t=this.container.git.getBestRepositoryOrFirst()))return;i=t.path}else t=this.container.git.getRepository(i)}this.setMode(e.mode,t),this.container.telemetry.sendEvent(`${this.options.attachedTo?"graphDetails":"commitDetails"}/mode/changed`,{...this.getTelemetryContext(),"mode.old":i,"mode.new":e.mode})}async openChanges(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),(0,h.eX)(i,t,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}),this.container.events.fire("file:selected",{uri:i.uri},{source:this.host.id}))}async openFileChangesWithWorking(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),(0,h.DD)(i,t,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}))}async openPreviousFileChangesWithWorking(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),(0,h.DD)(i,{repoPath:t.repoPath,ref:t.unresolvedPreviousSha},{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}),this.container.events.fire("file:selected",{uri:i.uri},{source:this.host.id}))}async openFile(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),(0,h.Tq)(i,t,{preserveFocus:!0,preview:!0}))}async openFileOnRemote(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,h.gV)(i,t)}async stageFile(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&await this.container.git.getRepositoryService(t.repoPath).staging?.stageFile(i.uri)}async unstageFile(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&await this.container.git.getRepositoryService(t.repoPath).staging?.unstageFile(i.uri)}getShowOptions(e){return M(e)?void 0:e?.showOptions}async copy(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&o.env.clipboard.writeText(i.path)}async copyRelativePath(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);if(null==t)return;let s=this.container.git.getRelativePath(i.uri,t.repoPath);o.env.clipboard.writeText(s)}async copyPatch(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);if(null==t)return;null==t.message&&await t.ensureFullDetails();let{summary:s,body:o}=(0,w.TH)(t.message);(0,S.RS)("gitlens.copyPatchToClipboard",{repoPath:t.repoPath,to:t.ref,from:`${t.ref}^`,title:s,description:o,uris:[i.uri]})}async openFileRevision(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),(0,h.vM)(i,t,{preserveFocus:!0,preview:!1}))}async openFileHistory(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.openFileHistory",i.uri)}async quickOpenFileHistory(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.quickOpenFileHistory",i.uri)}async visualizeFileHistory(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.visualizeHistory.file",i.uri)}async restoreFile(e){if(!L(e))return;let{path:t,repoPath:i,sha:s}=e.webviewItemValue;null!=s&&s!==g.SU&&await this.container.git.getRepositoryService(i).checkout(s,{path:t})}async restorePreviousFile(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,h.VX)(i,t,!0)}selectFileForCompare(e){if(!L(e))return;let{repoPath:t,sha:i}=e.webviewItemValue,s=V(this.container,e.webviewItemValue);null!=s&&(0,F.o)("gitlens:views:canCompare:file",{ref:i??g.SU,repoPath:t,uri:s})}async compareFileWithSelected(e){let t=(0,F.SD)("gitlens:views:canCompare:file");if(null==t||!L(e))return;(0,F.o)("gitlens:views:canCompare:file",void 0);let{repoPath:i,sha:s}=e.webviewItemValue;if(t.repoPath!==i)return void this.selectFileForCompare(e);let o=V(this.container,e.webviewItemValue);null!=o&&await this.compareFileWith(t.repoPath,t.uri,t.ref,o,s??g.SU)}async compareFileWith(e,t,i,s,o){return s??=await this.container.git.getRepositoryService(e).getWorkingUri(t),(0,S.RS)("gitlens.diffWith",{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:o,uri:s??t}})}async applyChanges(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,h.YF)(i,t)}async mergeChangesWithWorking(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);if(null==t)return;let s=this.container.git.getRepositoryService(t.repoPath);if(null==s)return;let n=await s.getBestRevisionUri(i.path,t.ref);if(null==n)return;let a={uri:n,title:"Incoming",detail:` ${t.shortSha}`},[r,l]=await Promise.allSettled([s.refs.getMergeBase(t.ref,"HEAD"),s.getWorkingUri(i.uri)]),h=(0,H.Ro)(l);if(null==h)return void o.window.showWarningMessage("Unable to open the merge editor, no working file found");let c={uri:h,title:"Current",detail:" Working Tree"},p=await s.getBestRevisionUri(i.path,"HEAD");if(null!=p){let e=await s.branches.getBranch?.();c.uri=p,c.detail=` ${e?.name||"HEAD"}`}let u=(0,H.Ro)(r),m=null!=u?await s.getBestRevisionUri(i.path,u):void 0;return(0,D.g6)({base:m??n,input1:a,input2:c,output:h})}diffWithRevision(e){if(!L(e))return;let t=V(this.container,e.webviewItemValue);null!=t&&(0,S.RS)("gitlens.diffWithRevision",t)}diffWithRevisionFrom(e){if(!L(e))return;let t=V(this.container,e.webviewItemValue);null!=t&&(0,S.RS)("gitlens.diffWithRevisionFrom",t)}async externalDiff(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.externalDiff",{files:[{uri:i.uri,staged:!1,ref1:`${t.ref}^`,ref2:t.ref}]})}async highlightChanges(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),await (0,h.Tq)(i,t,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(o.window.activeTextEditor,"changes",{sha:t.ref},!0))}async highlightRevisionChanges(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(this.suspendLineTracker(),await (0,h.Tq)(i,t,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(o.window.activeTextEditor,"changes",{sha:t.ref,only:!0},!0))}async copyDeepLinkToCommit(e){let[t]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.copyDeepLinkToCommit",{refOrRepoPath:t})}async copyDeepLinkToFile(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.copyDeepLinkToFile",{ref:t,filePath:i.path,repoPath:t.repoPath})}async copyDeepLinkToFileAtRevision(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.copyDeepLinkToFileAtRevision",{ref:t,filePath:i.path,repoPath:t.repoPath,chooseRef:!0})}async copyRemoteCommitUrl(e){let[t]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.openOnRemote",{repoPath:t.repoPath,resource:{type:m.J.Commit,sha:t.ref},clipboard:!0})}async shareAsCloudPatch(e){let[t]=await this.getFileCommitFromContextOrParams(e);if(null==t)return;null==t.message&&await t.ensureFullDetails();let{summary:i,body:s}=(0,w.TH)(t.message);(0,S.RS)("gitlens.createCloudPatch",{to:t.ref,repoPath:t.repoPath,title:i,description:s})}async copyRemoteFileUrlFrom(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.copyRemoteFileUrlFrom",{sha:t.ref,clipboard:!0,pickBranchOrTag:!0,range:!1})}async copyRemoteFileUrlWithoutRange(e){let[t,i]=await this.getFileCommitFromContextOrParams(e);null!=t&&(0,S.RS)("gitlens.copyRemoteFileUrlWithoutRange",{sha:t.ref,clipboard:!0,range:!1})}};function K(e){if(null!=e)return{changes:e.changes,repositoryCount:e.repositoryCount,branch:function(e){if(null!=e)return{name:e.name,repoPath:e.repoPath,upstream:e.upstream,tracking:{ahead:e.upstream?.state.ahead??0,behind:e.upstream?.state.behind??0}}}(e.branch),repo:{uri:e.repo.uri.toString(),name:e.repo.name,path:e.repo.path},pullRequest:null!=e.pullRequest?(0,v.pf)(e.pullRequest):void 0,codeSuggestions:e.codeSuggestions?.map(e=>({...e,changesets:void 0}))}}G([(0,W.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"getState",1),G([(0,W.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateWipState",1),G([(0,W.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"getEnrichedState",1),G([Y("gitlens.views.openChanges:")],CommitDetailsWebviewProvider.prototype,"openChanges",1),G([Y("gitlens.views.openChangesWithWorking:")],CommitDetailsWebviewProvider.prototype,"openFileChangesWithWorking",1),G([Y("gitlens.views.openPreviousChangesWithWorking:")],CommitDetailsWebviewProvider.prototype,"openPreviousFileChangesWithWorking",1),G([Y("gitlens.views.openFile:")],CommitDetailsWebviewProvider.prototype,"openFile",1),G([Y("gitlens.openFileOnRemote:")],CommitDetailsWebviewProvider.prototype,"openFileOnRemote",1),G([Y("gitlens.views.stageFile:")],CommitDetailsWebviewProvider.prototype,"stageFile",1),G([Y("gitlens.views.unstageFile:")],CommitDetailsWebviewProvider.prototype,"unstageFile",1),G([Y("gitlens.views.copy:")],CommitDetailsWebviewProvider.prototype,"copy",1),G([Y("gitlens.copyRelativePathToClipboard:")],CommitDetailsWebviewProvider.prototype,"copyRelativePath",1),G([Y("gitlens.copyPatchToClipboard:")],CommitDetailsWebviewProvider.prototype,"copyPatch",1),G([Y("gitlens.views.openFileRevision:")],CommitDetailsWebviewProvider.prototype,"openFileRevision",1),G([Y("gitlens.openFileHistory:")],CommitDetailsWebviewProvider.prototype,"openFileHistory",1),G([Y("gitlens.quickOpenFileHistory:")],CommitDetailsWebviewProvider.prototype,"quickOpenFileHistory",1),G([Y("gitlens.visualizeHistory.file:")],CommitDetailsWebviewProvider.prototype,"visualizeFileHistory",1),G([Y("gitlens.restore.file:")],CommitDetailsWebviewProvider.prototype,"restoreFile",1),G([Y("gitlens.restorePrevious.file:")],CommitDetailsWebviewProvider.prototype,"restorePreviousFile",1),G([Y("gitlens.views.selectFileForCompare:")],CommitDetailsWebviewProvider.prototype,"selectFileForCompare",1),G([Y("gitlens.views.compareFileWithSelected:")],CommitDetailsWebviewProvider.prototype,"compareFileWithSelected",1),G([Y("gitlens.views.applyChanges:")],CommitDetailsWebviewProvider.prototype,"applyChanges",1),G([Y("gitlens.views.mergeChangesWithWorking:")],CommitDetailsWebviewProvider.prototype,"mergeChangesWithWorking",1),G([Y("gitlens.diffWithRevision:")],CommitDetailsWebviewProvider.prototype,"diffWithRevision",1),G([Y("gitlens.diffWithRevisionFrom:")],CommitDetailsWebviewProvider.prototype,"diffWithRevisionFrom",1),G([Y("gitlens.externalDiff:")],CommitDetailsWebviewProvider.prototype,"externalDiff",1),G([Y("gitlens.views.highlightChanges:")],CommitDetailsWebviewProvider.prototype,"highlightChanges",1),G([Y("gitlens.views.highlightRevisionChanges:")],CommitDetailsWebviewProvider.prototype,"highlightRevisionChanges",1),G([Y("gitlens.copyDeepLinkToCommit:")],CommitDetailsWebviewProvider.prototype,"copyDeepLinkToCommit",1),G([Y("gitlens.copyDeepLinkToFile:")],CommitDetailsWebviewProvider.prototype,"copyDeepLinkToFile",1),G([Y("gitlens.copyDeepLinkToFileAtRevision:")],CommitDetailsWebviewProvider.prototype,"copyDeepLinkToFileAtRevision",1),G([Y("gitlens.views.copyRemoteCommitUrl:")],CommitDetailsWebviewProvider.prototype,"copyRemoteCommitUrl",1),G([Y("gitlens.shareAsCloudPatch:")],CommitDetailsWebviewProvider.prototype,"shareAsCloudPatch",1),G([Y("gitlens.copyRemoteFileUrlFrom:")],CommitDetailsWebviewProvider.prototype,"copyRemoteFileUrlFrom",1),G([Y("gitlens.copyRemoteFileUrlWithoutRange:")],CommitDetailsWebviewProvider.prototype,"copyRemoteFileUrlWithoutRange",1)},7483:(e,t,i)=>{i.d(t,{l:()=>a});var s=i(1398),o=i(746),n=i(2948);async function a(e){if(e.storage.get("confirm:draft:storage",!1))return!0;for(;;){let t={title:"Continue"},i={title:"Cancel",isCloseAffordance:!0},a={title:"Learn More"},r={title:"Security"},l=await s.window.showInformationMessage("Cloud Patches are securely stored by GitKraken and can be accessed by anyone with the link and a GitKraken account.",{modal:!0},t,a,r,i);if(l===t)return e.storage.store("confirm:draft:storage",!0).catch(),!0;if(l===r){(0,n.CZ)(o.DS.security);continue}if(l===a){(0,n.CZ)(o.DS.cloudPatches);continue}return!1}}}};